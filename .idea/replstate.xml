<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1487539108720">{:repl-history {:ide [], :local [&quot;(read-csv \&quot;resources/songs.csv\&quot; \&quot;|\&quot;)&quot; &quot;(read-csv \&quot;resources/songs.csv\&quot; \\|)&quot; &quot;(read-csv \&quot;resources/songs.csv\&quot; \\| nil)&quot; &quot;(read-csv \&quot;resources/songs.csv\&quot;)&quot; &quot;(vec '(1 2))&quot; &quot;(hash-map '(1 2))&quot; &quot;(apply hash-map '(:a 1))&quot; &quot;(apply hash-map '(:a 1 :b 2))&quot; &quot;(first (read-csv \&quot;resources/songs.csv\&quot; \\| \\u0080))&quot; &quot;(count (read-csv \&quot;resources/songs.csv\&quot; \\| \\u0080))&quot; &quot;(count (read-csv \&quot;resources/daily.csv\&quot;))&quot; &quot;(count (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))&quot; &quot;(group-by :location (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))&quot; &quot;(kw-args 1)&quot; &quot;(kw-args 1 :kw1 2)&quot; &quot;(kw-args 1 :kw2)&quot; &quot;(kw-args 1 {:kw1 1})&quot; &quot;(kw-args 1 :op1 1 :op2 3)&quot; &quot;(kw-args 1 :op1 1 :op2 )&quot; &quot;(kw-args 1 :op1 1 :op2 nil)&quot; &quot;(first (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))&quot; &quot;(take 3 (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))&quot; &quot;(keys (group-by :location (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;)))&quot; &quot;(frequencies (map :location (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;)))&quot; &quot;(def data (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))&quot; &quot;(frequencies (map :location data))&quot; &quot;(set (map #(juxt :location :stationid %) data))&quot; &quot;(set (map #((juxt :location :stationid) %) data))&quot; &quot;(flatten (set (map #((juxt :location :stationid) %) data)))&quot; &quot;(apply hash-map (set (map #((juxt :location :stationid) %) data)))&quot; &quot;(vec (set (map #((juxt :location :stationid) %) data)))&quot; &quot;(flatten (vec (set (map #((juxt :location :stationid) %) data))))&quot; &quot;(apply hash-map (flatten (vec (set (map #((juxt :location :stationid) %) data)))))&quot; &quot;(comp \n  str\n  (constaly 1))&quot; &quot;(comp \n  str\n  (constantly 1))&quot; &quot;((comp\n   str\n   constantly) 1)&quot; &quot;((comp\n   str\n   (constantly 1)) 10)&quot; &quot;(read-csv \&quot;resources/songs.csv\&quot; \\| \\u0080)&quot; &quot;(count \n  (read-csv \&quot;resources/songs.csv\&quot; \\| \\u0080))&quot; &quot;(map ((fnil identity) nil) [:a :b :c])&quot; &quot;(map ((fnil identity identity) nil) [:a :b :c])&quot; &quot;(map ((fnil identity identity) str) [:a :b :c])&quot; &quot;(map identity)&quot; &quot;((map identity) [1 2 3])&quot; &quot;(sequence (map identity) [1 2 3])&quot; &quot;(keyword :a)&quot; &quot;(keyword \&quot;a\&quot;)&quot; &quot;(keyword 1)&quot; &quot;(map keyword [\&quot;a\&quot; \&quot;b\&quot;])&quot; &quot;(count (group-by :stationid (read-csv \&quot;resources/test.csv\&quot; \\, \\\&quot;)))&quot; &quot;(keys (group-by :stationid (read-csv \&quot;resources/test.csv\&quot; \\, \\\&quot;)))&quot; &quot;(map count (values (group-by :date (read-csv \&quot;resources/test.csv\&quot; \\, \\\&quot;))))&quot; &quot;(map count (vals (group-by :date (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))))&quot; &quot;(count (group-by :stationid (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;)))&quot; &quot;(keys (group-by :stationid (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;)))&quot; &quot;(into {} (map (fn [[k v] [k (count v)]]) (group-by :stationid (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))))&quot; &quot;(into {} (map (fn [[k v]] [k (count v)]) (group-by :stationid (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))))&quot; &quot;(into {} (map (fn [[k v]] [(keyword k) (count v)]) (group-by :stationid (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))))&quot; &quot;(map count (vals (group-by :date (read-csv \&quot;resources/test.csv\&quot; \\, \\\&quot;))))&quot; &quot;(read-csv \&quot;resources/test.csv\&quot; \\, \\\&quot;)&quot; &quot;(map count (keys (group-by :date (read-csv \&quot;resources/test.csv\&quot; \\, \\\&quot;))))&quot; &quot;(keys (group-by :date (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;)))&quot; &quot;(count (keys (group-by :date (read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;))))&quot; &quot;(assoc-in {} [:a :b ] 1)&quot; &quot;((fnil assoc-in {}) nil [:a :b ] 1)&quot; &quot;(keys (group-by :date (read-csv \&quot;resources/test.csv\&quot; \\, \\\&quot;)))&quot; &quot;(take 1 \n  (read-csv \&quot;resources/songs.csv\&quot; \\| \\u0080))&quot; &quot;(read-csv \&quot;resources/daily.csv\&quot; \\, \\\&quot;)&quot;], :remote []}}</component>
</project>